import { create } from 'zustand';
import { StudyData, createDefaultStudyData } from '../types/studyTypes';
import { studyDataApi, handleApiError } from '../utils/studyApi';

const useStudyStore = create((set, get) => ({
  // Initial state
  studyData: createDefaultStudyData(),
  isLoading: false,
  error: null,
  
  // Actions
  setStudyData: (data) => set({ 
    studyData: new StudyData(data),
    error: null 
  }),
  
  setLoading: (loading) => set({ isLoading: loading }),
  
  setError: (error) => set({ error }),
  
  // Task management
  addTask: (taskData, selectedDate = null) => set((state) => {
    const now = new Date();
    const taskDate = selectedDate || now;
    
    const newTask = {
      id: Date.now().toString(), // Temporary ID, should be generated by backend
      ...taskData,
      created_at: taskDate.toISOString(),
      updated_at: now.toISOString(),
      task_date: taskDate.toISOString().split('T')[0] // Add date field for filtering
    };
    
    // Debug: Log task creation
    console.log('Adding task:', {
      title: newTask.title,
      task_date: newTask.task_date,
      selectedDate: selectedDate?.toISOString().split('T')[0],
      currentDate: now.toISOString().split('T')[0]
    });
    
    const updatedMatrix = {
      ...state.studyData.eisenhower_matrix,
      list_of_tasks: [...state.studyData.eisenhower_matrix.list_of_tasks, newTask]
    };
    
    return {
      studyData: {
        ...state.studyData,
        eisenhower_matrix: updatedMatrix
      }
    };
  }),
  
  updateTask: (taskId, updates) => set((state) => {
    const updatedTasks = state.studyData.eisenhower_matrix.list_of_tasks.map(task =>
      task.id === taskId 
        ? { ...task, ...updates, updated_at: new Date().toISOString() }
        : task
    );
    
    const updatedMatrix = {
      ...state.studyData.eisenhower_matrix,
      list_of_tasks: updatedTasks
    };
    
    return {
      studyData: {
        ...state.studyData,
        eisenhower_matrix: updatedMatrix
      }
    };
  }),
  
  deleteTask: (taskId) => set((state) => {
    const updatedTasks = state.studyData.eisenhower_matrix.list_of_tasks.filter(
      task => task.id !== taskId
    );
    
    const updatedMatrix = {
      ...state.studyData.eisenhower_matrix,
      list_of_tasks: updatedTasks
    };
    
    return {
      studyData: {
        ...state.studyData,
        eisenhower_matrix: updatedMatrix
      }
    };
  }),
  
  // Pomodoro timer management
  updatePomodoroTimer: (updates) => set((state) => ({
    studyData: {
      ...state.studyData,
      pomodoro_timer: {
        ...state.studyData.pomodoro_timer,
        ...updates
      }
    }
  })),
  
  // Sound management
  updateSound: (updates) => set((state) => ({
    studyData: {
      ...state.studyData,
      sound: {
        ...state.studyData.sound,
        ...updates
      }
    }
  })),
  
  // Daily data management
  addDailyData: (dailyData) => set((state) => ({
    studyData: {
      ...state.studyData,
      stress_jounral_data: [...state.studyData.stress_jounral_data, dailyData]
    }
  })),
  
  updateDailyData: (day, month, year, updates) => set((state) => {
    const updatedDailyData = state.studyData.stress_jounral_data.map(daily =>
      daily.day === day && daily.month === month && daily.year === year
        ? { ...daily, ...updates }
        : daily
    );
    
    return {
      studyData: {
        ...state.studyData,
        stress_jounral_data: updatedDailyData
      }
    };
  }),
  
  // API integration
  fetchStudyData: async () => {
    set({ isLoading: true, error: null });
    
    try {
      const data = await studyDataApi.getStudyData();
      set({ studyData: new StudyData(data), isLoading: false });
    } catch (error) {
      // Silently fall back to default data when API is unavailable
      set({ 
        studyData: createDefaultStudyData(), 
        isLoading: false,
        error: null // Don't show error in UI when API is unavailable
      });
    }
  },
  
  // Getters for computed values
  getTasksByQuadrant: (quadrant) => {
    const { studyData } = get();
    return studyData.eisenhower_matrix.list_of_tasks.filter(task => task.quadrant === quadrant);
  },
  
  getTasksByStatus: (status) => {
    const { studyData } = get();
    return studyData.eisenhower_matrix.list_of_tasks.filter(task => task.status === status);
  },
  
  getDailyDataByDate: (day, month, year) => {
    const { studyData } = get();
    return studyData.stress_jounral_data.find(daily => 
      daily.day === day && daily.month === month && daily.year === year
    );
  },
  
  getTotalTasks: () => {
    const { studyData } = get();
    return studyData.eisenhower_matrix.list_of_tasks.length;
  },
  
  getCompletedTasks: () => {
    const { studyData } = get();
    return studyData.eisenhower_matrix.list_of_tasks.filter(task => task.status === 'completed').length;
  }
}));

export default useStudyStore;
